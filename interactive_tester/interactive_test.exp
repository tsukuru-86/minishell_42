#!/usr/bin/expect -f

# minishellのインタラクティブテスト用expectスクリプト
# 作成日: 2025年6月24日

# タイムアウト設定（5秒）
set timeout 5

# カラー出力設定
proc print_test_header {test_name} {
    puts "\n\033\[1;34m=== $test_name ===\033\[0m"
}

proc print_success {message} {
    puts "\n\033\[1;32m✓ $message\033\[0m"
}

proc print_error {message} {
    puts "\n\033\[1;31m✗ $message\033\[0m"
}

proc print_info {message} {
    puts "\033\[1;33m→ $message\033\[0m"
}

# テスト結果保存用変数
set test_results {}
set test_count 0
set passed_count 0

# テスト結果記録関数
proc record_test {test_name status output} {
    global test_results test_count passed_count
    incr test_count
    if {$status == "PASS"} {
        incr passed_count
        print_success "$test_name"
    } else {
        print_error "$test_name"
    }
    lappend test_results "$test_name: $status"
    if {$output != ""} {
        lappend test_results "  Output: $output"
    }
}

# プロンプト待機関数
proc wait_for_prompt {} {
    expect {
        -re "minishell>\[ \t\]*" { return 1 }
        timeout {
            print_error "プロンプト待機でタイムアウトしました"
            return 0
        }
    }
}

# コマンド実行とテスト関数
proc run_test {test_name command expected_pattern} {
    global spawn_id
    
    print_info "テスト実行: $command"
    
    # コマンド送信
    send "\r"
    send "$command\r"
    
    # 出力をキャプチャ
    set output ""
    expect {
        -re $expected_pattern {
            set output $expect_out(buffer)
            record_test $test_name "PASS" ""
            return 1
        }
        "minishell> " {
            set output $expect_out(buffer)
            record_test $test_name "FAIL" "期待する出力が見つかりませんでした"
            return 0
        }
        timeout {
            record_test $test_name "FAIL" "タイムアウト"
            return 0
        }
    }
}

# メイン処理開始
puts "\033\[1;36m=== minishell インタラクティブテスト開始 ===\033\[0m"
puts "タイムアウト設定: $timeout 秒"

# minishellの存在確認
if {![file exists "../minishell"]} {
    print_error "minishell実行ファイルが見つかりません"
    print_info "make コマンドでビルドしてください"
    exit 1
}

# minishell起動
print_info "minishell を起動中..."
spawn ../minishell

# 初期プロンプト待機
if {![wait_for_prompt]} {
    print_error "minishell の起動に失敗しました"
    exit 1
}

# print_success "minishell が正常に起動しました"

# テストケース実行
# print_test_header "基本コマンドテスト"

# echo テスト
run_test "echo hello" "echo hello" "hello.*minishell>"

# pwd テスト  
run_test "pwd" "pwd" "/.*minishell>"

# ls テスト（ファイルが存在する場合）
run_test "ls" "ls" ".*minishell>"

print_test_header "ビルトインコマンドテスト"

# env テスト
run_test "env" "env" ".*=.*minishell>"

# export テスト（独立テスト）
run_test "export TEST_VAR=hello" "export TEST_VAR=hello" "minishell>"

# システム変数確認
run_test "システム変数表示" "echo \$HOME" "/.*minishell>"

# unset テスト（未定義変数）
run_test "unset未定義変数" "unset NONEXISTENT_VAR" "minishell>"

# cd テスト（現在のディレクトリを使用）
run_test "cd ." "cd ." "minishell>"

print_test_header "パイプテスト"

# パイプテスト（シンプルなケース）
run_test "echo hello | cat" "echo hello | cat" "hello.*minishell>"

print_test_header "リダイレクトテスト"

# 出力リダイレクト
run_test "echo test > test_output.txt" "echo test > test_output.txt" "minishell>"

# 入力リダイレクト（Makefileを使用）
run_test "入力リダイレクト基本" "cat < Makefile" ".*minishell>"

# テストファイル削除
run_test "rm test_output.txt" "rm test_output.txt" "minishell>"

print_test_header "履歴機能テスト"

# コマンド実行
run_test "echo history_test" "echo history_test" "history_test.*minishell>"

# 上矢印キーで履歴呼び出し
print_info "履歴機能テスト: 上矢印キー"
send "\033\[A"
expect {
    "echo history_test" {
        print_success "履歴機能が正常に動作しています"
        record_test "履歴呼び出し" "PASS" ""
        send "\r"
        wait_for_prompt
    }
    timeout {
        record_test "履歴呼び出し" "FAIL" "履歴が呼び出されませんでした"
    }
}

print_test_header "エラーハンドリングテスト"

# 存在しないコマンド
run_test "nonexistent_command" "nonexistent_command" ".*command not found.*minishell>"

# 無効な構文
run_test "echo |" "echo |" ".*syntax error.*minishell>|minishell>"

print_test_header "終了テスト"

# exit コマンドでテスト終了
print_info "exit コマンドでminishellを終了します"
send "exit\r"
expect {
    eof {
        print_success "exit コマンドで正常に終了しました"
        record_test "exit コマンド" "PASS" ""
    }
    timeout {
        print_error "exit コマンドでの終了がタイムアウトしました"
        record_test "exit コマンド" "FAIL" "タイムアウト"
        close
    }
}

# テスト結果の表示
puts "\n\033\[1;36m=== テスト結果サマリー ===\033\[0m"
puts "実行テスト数: $test_count"
puts "成功: $passed_count"
puts "失敗: [expr $test_count - $passed_count]"
puts "成功率: [expr $passed_count * 100 / $test_count]%"

# 結果をファイルに保存
set result_file [open "test_results_[clock format [clock seconds] -format %Y%m%d_%H%M%S].txt" w]
puts $result_file "=== minishell インタラクティブテスト結果 ==="
puts $result_file "実行日時: [clock format [clock seconds]]"
puts $result_file "実行テスト数: $test_count"
puts $result_file "成功: $passed_count"
puts $result_file "失敗: [expr $test_count - $passed_count]"
puts $result_file "成功率: [expr $passed_count * 100 / $test_count]%"
puts $result_file "\n=== 詳細結果 ==="

# 詳細結果を出力
set i 0
while {$i < [llength $test_results]} {
    puts $result_file [lindex $test_results $i]
    incr i
}

close $result_file
print_success "テスト結果を test_results_[clock format [clock seconds] -format %Y%m%d_%H%M%S].txt に保存しました"

# 終了コード設定
if {$passed_count == $test_count} {
    exit 0
} else {
    exit 1
}