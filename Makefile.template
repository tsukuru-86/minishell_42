NAME = minishell

CC = cc
CFLAGS = -Wall -Wextra -Werror -I. -I/usr/include -Ilibft -Isrcs -g -O0

# OS検出と環境依存の設定
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
    # macOS固有のフラグを追加
    CFLAGS += -DMACOS
    $(info MacOS環境を検出しました。readline関数の互換性対応を有効化します。)
endif
ifeq ($(UNAME_S),Linux)
    # Linux固有のフラグを追加
    CFLAGS += -DLINUX
    $(info Linux環境を検出しました。標準のreadline関数を使用します。)
endif

SRCS_DIR = srcs/
SRCS_FILE = main.c \
#########
SRCS = $(addprefix $(SRCS_DIR), $(SRCS_FILE))
OBJS_DIR = obj/
OBJS = $(addprefix $(OBJS_DIR), $(SRCS_FILE:.c=.o))

LIBFT_DIR = libft/
LIBFT = $(LIBFT_DIR)libft.a

# ディレクトリ作成の最適化用フラグファイル（隠しファイル）
OBJDIR_FLAG := $(OBJS_DIR).builddir_ready


all: check_makefile_update $(LIBFT) $(NAME)

$(LIBFT):
	make -C $(LIBFT_DIR)

$(NAME): $(OBJS) | minishell.h
	$(CC) $(CFLAGS) $(OBJS) $(LIBFT) -lreadline -o $(NAME)

# ディレクトリ作成の最適化：一度だけ必要なディレクトリを作成
$(OBJDIR_FLAG):
	@mkdir -p $(sort $(dir $(OBJS)))
	@touch $@

$(OBJS_DIR)%.o: $(SRCS_DIR)%.c $(OBJDIR_FLAG) | minishell.h
	$(CC) $(CFLAGS) -c $< -o $@

.PHONY: all clean fclean re cre check_makefile_update

# ソースファイル変更の自動検知
check_makefile_update:
	@if [ -n "$$(find $(SRCS_DIR) -name '*.c' -newer Makefile 2>/dev/null | head -1)" ]; then \
		echo "ソースファイルの変更を検知しました。Makefileを自動更新中..."; \
		./update_makefile.sh; \
	fi

clean:
	make -C $(LIBFT_DIR) clean
	rm -rf $(OBJS_DIR)

fclean: clean
	make -C $(LIBFT_DIR) fclean
	rm -f $(NAME)

re: fclean all

cre: clean all

test1: cre
	DEBUG=0
	cd ./minishell_tester-nda-cunh&&./tester 2>&1

test2: cre
	cd ./minishell_tester&&./tester 2>&1

debug: 
	$(MAKE) cre CFLAGS="$(CFLAGS) -DDEBUG=1"

.PHONY: all clean fclean re cre test1 test2  debug
