# Roo コーディングルール - minishellプロジェクト

## 42 Norm Version 3 準拠

## 1. 基本制約（42 Norm + プロジェクト固有）

### 1.1 禁止事項（42 Norm準拠）

- **for文の使用禁止**: while文またはrecursionを使用すること
- **do-while文の使用禁止**: while文を使用すること  
- **switch文の使用禁止**
- **case文の使用禁止**
- **goto文の使用禁止**
- **三項演算子（?:）の使用禁止**
- **可変長配列（VLA）の使用禁止**
- **暗黙的な型宣言の禁止**

### 1.2 グローバル変数制約

- **グローバル変数**: `g_signal_number`以外は禁止
- **const・static以外のグローバル変数宣言禁止**（42 Norm準拠）
- **関数外のstatic変数**: 禁止（関数内のstatic変数は使用可能）

### 1.3 許可された関数のみ使用

以下の関数のみ使用可能：

- **readline系**: readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history
- **標準出力**: printf
- **メモリ管理**: malloc, free
- **ファイル操作**: write, access, open, read, close
- **プロセス制御**: fork, wait, waitpid, wait3, wait4, exit
- **シグナル処理**: signal, sigaction, sigemptyset, sigaddset, kill
- **ディレクトリ操作**: getcwd, chdir
- **ファイル情報**: stat, lstat, fstat, unlink
- **プロセス実行**: execve
- **ファイルディスクリプタ**: dup, dup2, pipe
- **ディレクトリ読み込み**: opendir, readdir, closedir
- **エラー処理**: strerror, perror
- **端末制御**: isatty, ttyname, ttyslot, ioctl
- **環境変数**: getenv
- **端末属性**: tcsetattr, tcgetattr
- **termcap**: tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
- **libft関数**: 全てのlibft関数

## 2. 42 Norm準拠：構造とフォーマット

### 2.1 ファイル構造

- **1ファイル最大5関数**
- **関数は最大25行以内**（中括弧は行数に含めない）
- **関数の引数は最大4つ**
- **関数内のローカル変数は最大5つ**
- **.cファイルに構造体宣言禁止**（ヘッダファイルでのみ宣言）
- **ファイルのコンパイル必須**（コンパイルできないファイルはNorm違反）

### 2.2 コードフォーマット（42 Norm準拠）

- **インデント**: 4スペース相当のタブ文字のみ使用
- **1行最大80文字**（タブは対応するスペース数として計算）
- **1命令につき1行**
- **空行**: スペースやタブを含まない完全な空行
- **行末**: スペースやタブ禁止
- **連続するスペース禁止**
- **制御構造後の改行**: 中括弧または制御構造の終了後は改行
- **カンマ・セミコロン後**: スペース必須（行末除く）
- **演算子**: 前後に1つずつスペース
- **Cキーワード後**: スペース必須（型キーワード・sizeof除く）
- **変数宣言**: 同じスコープ内で同じ列に揃える
- **ポインタのアスタリスク**: 変数名に密着
- **1行1変数宣言**
- **宣言と初期化分離**（グローバル・static・const除く）
- **関数内宣言**: 関数の先頭で行い、その後に空行
- **関数内空行**: 変数宣言後の1行のみ許可
- **複数代入禁止**
- **制御構造**: 中括弧必須（単一行のみ例外）
- **関数間**: 空行で区切る

### 2.3 関数フォーマット（42 Norm準拠）

- **戻り値**: 括弧で囲む `return (value);`
- **戻り値型と関数名**: タブ1つで区切る
- **引数なし**: `void`を明記
- **プロトタイプ**: 引数名を含める

## 3. 命名規則（42 Norm準拠）

### 3.1 プレフィックス規則

- **構造体**: `s_`プレフィックス（例: `s_command`）
- **typedef**: `t_`プレフィックス（例: `t_command`, `t_token`）
- **共用体**: `u_`プレフィックス
- **列挙型**: `e_`プレフィックス（例: `e_token_type`）
- **グローバル変数**: `g_`プレフィックス（例: `g_signal_number`）

### 3.2 命名ルール

- **変数・関数**: snake_case（小文字・数字・アンダースコアのみ）
- **ファイル・ディレクトリ**: snake_case
- **標準ASCII文字のみ**
- **スネークケース**: 各単語をアンダースコアで区切る
- **英語のみ**
- **明示的・記憶しやすい名前**

### 3.3 定数・マクロ

- **定数**: 大文字スネークケース（例: `MAX_TOKENS`, `TOKEN_WORD`）
- **マクロ**: 大文字スネークケース

## 4. ヘッダファイル管理（42 Norm準拠）

### 4.1 ヘッダファイルルール

- **許可内容**: ヘッダインクルード、宣言、define、プロトタイプ、マクロ
- **インクルード位置**: ファイルの先頭
- **.cファイルインクルード禁止**
- **二重インクルード防止**: インクルードガード必須
- **未使用ヘッダ禁止**
- **インクルード根拠**: .cファイル・.hファイル両方で正当化必要

### 4.2 インクルードガード例

```c
#ifndef MINISHELL_H
# define MINISHELL_H
/* ヘッダ内容 */
#endif
```

### 4.3 インクルード規則（プロジェクト固有）

- **srcs/*.c**: `minishell.h`のみインクルード
- **minishell.h**: 必要な全てのヘッダファイルをインクルード
- **循環インクルード**: 前方宣言で回避

## 5. 42ヘッダー

### 5.1 必須ヘッダー

- **全ファイル**: .c/.hファイルの先頭に42標準ヘッダー必須
- **含む情報**: 作成者、ログイン、メール、作成日、最終更新者、更新日
- **自動更新**: ファイル保存時に情報を自動更新

## 6. プリプロセッサ・マクロ（42 Norm準拠）

### 6.1 #define使用ルール

- **定数値のみ**: リテラル・定数値にのみ使用
- **Norm回避禁止**: コード難読化目的での#define禁止
- **標準ライブラリマクロ**: プロジェクトで許可されたもののみ
- **複数行マクロ禁止**
- **マクロ名**: 全て大文字

### 6.2 条件コンパイル

- **インデント**: #if、#ifdef、#ifndef後の文字をインデント

## 7. コメント規則（42 Norm準拠）

### 7.1 禁止

- **関数内コメント**: 一切禁止
- **関数本体内**: コメント配置禁止

### 7.2 許可されるコメント

- **行末コメント**: 許可
- **独立行コメント**: 許可
- **英語のみ**: コメントは英語で記述
- **有用性**: 有用なコメントのみ
- **悪い関数の正当化禁止**: コメントで悪いコードを正当化不可

### 7.3 必須コメント（プロジェクト固有）

- **ファイル先頭**: ファイルの役割説明
- **関数前**: 関数の目的、引数、戻り値の説明
- **複雑な構造体**: メンバの説明

## 8. 構造体・typedef・enum・union（42 Norm準拠）

### 8.1 宣言ルール

- **タブインデント**: struct、enum、union宣言時にタブ追加
- **型宣言**: struct、enum、union型変数宣言時に単一スペース
- **typedef名**: タブでインデント
- **スコープ内整列**: 構造体名を同じ列に整列
- **.cファイル構造体宣言禁止**: ヘッダファイルでのみ宣言

## 9. メモリ管理（重要）

### 9.1 メモリリーク防止

- **動的確保したメモリは必ず解放**（readline()の戻り値除く）
- **関数終了前に確保したメモリを全て解放**
- **エラー時も確実にメモリ解放**
- **早期リターン時は解放済みメモリを追跡**

### 9.2 不正終了防止

- **SEGV防止**: NULLポインタチェック必須
- **double free防止**: 解放後にNULL代入
- **リソース解放**: ファイルディスクリプタ、プロセスも確実に解放
- **エラー時**: エラーメッセージ出力後に正常終了

## 10. エラー処理

### 10.1 エラー出力

- **システムエラー**: `perror()`使用
- **カスタムエラー**: `write(STDERR_FILENO, ...)`またはlibftの`ft_putstr_fd()`使用
- **エラー時の戻り値**: 関数仕様に従った適切な値を返す

### 10.2 エラー処理パターン

- **メモリ確保失敗**: 即座にリターン、既確保メモリは解放
- **システムコール失敗**: perrorでエラー出力、適切な戻り値
- **引数エラー**: NULL チェック、不正値チェック

## 11. 関数設計

### 11.1 関数の責任

- **単一責任**: 1つの関数は1つの責任のみ
- **short function**: 複雑な処理は複数の関数に分割
- **static関数**: 同じファイル内でのみ使用される関数

### 11.2 引数・戻り値

- **引数**: const修飾子を適切に使用
- **戻り値**: エラー状態を明確に示す
- **ポインタ**: NULLチェックを関数開始時に実行

## 12. Makefile（42 Norm準拠）

### 12.1 必須ルール

- **必須ターゲット**: $(NAME), clean, fclean, re, all
- **リリンク禁止**: Makefileがリリンクする場合は機能不全とみなす
- **マルチバイナリ**: 両方のバイナリをコンパイルするルール + 各バイナリ固有ルール
- **ライブラリ**: 非システムライブラリの自動コンパイル
- **ソースファイル**: 全ソースファイルをMakefileで明示的に指定

## 13. シグナル処理（プロジェクト固有）

### 13.1 グローバル変数

- **使用可能**: `g_signal_number`のみ
- **型**: `volatile sig_atomic_t`推奨
- **用途**: シグナル番号の保存のみ

### 13.2 シグナルハンドラ

- **最小限の処理**: グローバル変数への代入のみ
- **async-signal-safe関数**: のみ使用可能
- **複雑な処理**: メインループで実行

## 14. 入力処理（プロジェクト固有）

### 14.1 readline処理

- **メモリ解放**: readlineの戻り値は解放不要（システムが管理）
- **履歴管理**: add_historyで履歴に追加
- **入力検証**: NULL チェック、空文字列チェック

### 14.2 パース処理

- **クォート処理**: シングル・ダブルクォートの仕様準拠
- **環境変数展開**: `$`記号の適切な処理
- **特殊文字**: メタキャラクタの適切なエスケープ

## 15. テスト・デバッグ

### 15.1 メモリチェック

- **valgrind**: メモリリーク検出
- **静的解析**: 可能な限りコンパイル時チェック

### 15.2 エラーケース

- **境界値**: NULL、空文字列、最大値での動作確認
- **システムリソース**: ファイルディスクリプタ不足時の動作
- **メモリ不足**: malloc失敗時の適切な処理

## 16. プロジェクト構造

### 16.1 ディレクトリ構造

```
srcs/
├── main.c
├── builtin/     # ビルトインコマンド
├── external/    # 外部コマンド実行
├── parser/      # 構文解析
├── tokenizer/   # トークン化
├── pipeline/    # パイプライン処理
├── redirect/    # リダイレクト
├── utils/       # ユーティリティ関数
└── error/       # エラー処理
```

### 16.2 ファイル命名

- **機能別**: 関連する機能を1つのファイルにまとめる
- **utils接尾辞**: ユーティリティ関数用
- **明確な名前**: ファイル名から内容が推測可能

## 17. フォーマット例（42 Norm準拠）

```c
int   g_signal_number;

typedef struct s_command
{
 char  *command;
 char  **args;
 int   argc;
}    t_command;

int main(void)
{
 int  status;
 char *input;

 status = 0;
 input = readline("minishell> ");
 return (status);
}
```

---
**重要**: この42 Norm Version 3準拠ルールは厳格に遵守すること。違反はnorminetteとコードレビューで指摘される。
