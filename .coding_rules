# minishell プロジェクトコーディングルール

## 1. 命名規則
- 変数名: スネークケース (例: `command_line`, `exit_status`)
- 関数名: スネークケース (例: `parse_token`, `execute_command`)
- 型名: スネークケースで接頭辞 t_ をつける (例: `t_command`, `t_token`)
- 定数: 大文字のスネークケース (例: `MAX_TOKENS`, `TOKEN_WORD`)
- グローバル変数: `g_signal`1個のみ

## 2. コード構造
- 関数は25行以内に収める
- 関数の引数は4つまでとする
- 各関数の前にコメントでその目的を説明する
- 同じ関数からしか呼ばれない関数はstaticにして、できれば1つのファイルにまとめる
- 1ファイルあたり関数は5個以下

## 3. エラー処理
- メモリ確保失敗は即時リターン
- メモリー解放する
- perror関数を使用してエラーメッセージを出力する
- 必要に応じてエラーメッセージは標準エラー出力に出力(ft_rpintf_fd)
- 関数はエラー時に適切な戻り値を返す

## 4. メモリ管理
- 動的に確保したメモリは必ず解放する
- 二重解放を防ぐためにNULLチェックを行う
- 早期リターン、exitを使用するときは、他のファイルで確保されたメモリにもに注意する

## 5. シグナルハンドリング
- シグナル番号を格納するためのグローバル変数は1つだけ使用
- シグナルハンドラ内では最小限の処理のみを行う
- シグナル処理に関する詳細な状態管理は別途行う

## 6. コメント
# - 関数内のコメントは禁止
- 各ファイルの役割を説明するコメントをファイル先頭に記述
- 各関数の目的と動作を簡潔に説明するコメントを付ける

## 7. 入力処理
- ユーザー入力は適切にサニタイズする
- クォート内のテキストは仕様に従って処理する
- 環境変数展開は適切に行う
